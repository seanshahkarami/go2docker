#!/bin/bash -e

fatal() {
    echo fatal: $*
    exit 1
}

assert_nonempty() {
    if test -z "$1"; then
        fatal "$2"
    fi
}

scan_go_mod_file() {
    awk '
/^module/ {printf "gomodule=%s\n", $2}
/^go/ {printf "goversion=%s\n", $2}
' "$1"
}

godir="$1"
image="$2"
assert_nonempty "$godir" "must provide path to go directory"
assert_nonempty "$image" "must provide docker image name for build"

eval $(scan_go_mod_file "${godir}/go.mod")
assert_nonempty "$gomodule" "could not determine go module name"
assert_nonempty "$goversion" "could not determine go version"

cd "$godir"

# we are paranoid about silently overwriting a user created Dockerfile
if test -e Dockerfile; then
    fatal "Dockerfile already exists in ${godir}. stopping! please remove if this is an accident."
fi

# generate Dockerfile
cat > Dockerfile <<EOF
FROM golang:${goversion} AS builder
WORKDIR /build
COPY . .
RUN CGO_ENABLED=0 go build

FROM scratch
COPY --from=builder /build/${gomodule} /usr/bin/${gomodule}
ENTRYPOINT [ "/usr/bin/${gomodule}" ]
EOF

# add clean up hook
trap "rm -f Dockerfile" EXIT

# build Docker image
# TODO add buildx multiarch support
docker build -t "$2" .
