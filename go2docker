#!/bin/bash -e

fatal() {
    echo "fatal:" $*
    exit 1
}

assert_nonempty() {
    local val="${1}"
    local msg="${2}"
    if test -z "${val}"; then
        fatal "${msg}"
    fi
}

print_go_project_vars() {
    local godir="${1}"
    awk '
/^module/ {printf "gomodule=%s\n", $2}
/^go/ {printf "goversion=%s\n", $2}
' "${godir}/go.mod"
}

godir="${1}"
assert_nonempty "${godir}" "must provide path to go directory"

image="${2}"
assert_nonempty "${image}" "must provide docker image name for build"

eval $(print_go_project_vars "${godir}")
assert_nonempty "${gomodule}" "could not determine go module name"
assert_nonempty "${goversion}" "could not determine go version"

cd "${godir}"

# we are paranoid about silently overwriting a user created Dockerfile
if test -e Dockerfile; then
    fatal "Dockerfile already exists in ${godir}. stopping! please remove if this is an accident."
fi

# add cleanup hook
cleanup() {
    rm -f Dockerfile
}
trap cleanup EXIT ERR

# generate Dockerfile
cat > Dockerfile <<DOCKERFILE
FROM golang:${goversion} AS builder
WORKDIR /build
COPY . .
RUN CGO_ENABLED=0 go build

FROM scratch
COPY --from=builder /build/${gomodule} /app
ENTRYPOINT [ "/app" ]
DOCKERFILE

# build Docker image
# TODO add buildx multiarch support
docker build -t "${image}" .
